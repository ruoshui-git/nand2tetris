WEBVTT

1
00:00:01.370 --> 00:00:05.970
In this unit, we'll deal with a question,
how to deal with a bunch of bits together.

2
00:00:05.970 --> 00:00:09.680
Really this shouldn't really be a whole
unit, because it's almost trivial.

3
00:00:09.680 --> 00:00:14.470
But still, because there is a little bit
of technical details attached to it, it's

4
00:00:14.470 --> 00:00:18.790
probably worthwhile to spend five or six,
six minutes on this thing in a short unit.

5
00:00:19.810 --> 00:00:22.770
So the basic thing we want to
point out is the following thing.

6
00:00:22.770 --> 00:00:23.980
When we design hardware,

7
00:00:23.980 --> 00:00:26.490
a lot of times we need to manipulate
a bunch of bits together.

8
00:00:27.570 --> 00:00:31.540
First of all, it's going to be convenient,
conceptually convenient to think about

9
00:00:31.540 --> 00:00:35.210
the bunch of bits that are manipulated
together as one entity.

10
00:00:35.210 --> 00:00:38.880
And allow ourselves to think about it
in a slightly higher abstraction level,

11
00:00:38.880 --> 00:00:43.660
not of the single bits but
of a bunch of bits together is one entity.

12
00:00:44.680 --> 00:00:48.095
The second thing is, that of course sense
we are going to describe our chips,

13
00:00:48.095 --> 00:00:51.880
our hardware in, in hardware description
language, of course we will need

14
00:00:51.880 --> 00:00:55.470
some kind of support for that,
in the hardware description language.

15
00:00:55.470 --> 00:00:58.190
So a bunch of bits together that
are manipulated together and

16
00:00:58.190 --> 00:01:01.200
have one meaning
are sometimes called busses.

17
00:01:01.200 --> 00:01:04.380
From, come, coming from some
Latin word meaning many or

18
00:01:04.380 --> 00:01:06.000
multiple, something like that.

19
00:01:07.430 --> 00:01:11.850
So here is an example of how we can,
of how we can think about that.

20
00:01:11.850 --> 00:01:15.490
So when we want to add two numbers,
and we will build in the next,

21
00:01:15.490 --> 00:01:19.530
week, we will build some kind of
chip that adds two binary numbers.

22
00:01:19.530 --> 00:01:22.690
Each one of these binary numbers
will have a bunch of bits.

23
00:01:22.690 --> 00:01:25.080
Actually, 16 bits in our implementation.

24
00:01:25.080 --> 00:01:28.430
But we want to,
to think about them as numbers.

25
00:01:28.430 --> 00:01:34.220
So our our chip that adds two numbers
will be described as having two inputs.

26
00:01:34.220 --> 00:01:36.680
An a input, which is 16 bits.

27
00:01:36.680 --> 00:01:37.540
And the B input,

28
00:01:37.540 --> 00:01:42.170
which is 16 bits, and one output,
which is out, which also has 16 bits.

29
00:01:43.250 --> 00:01:47.050
So in reality,
our chip has 32 wires feeding into it, and

30
00:01:47.050 --> 00:01:50.990
16 wires going out of it, but
still it's convenient to think about

31
00:01:50.990 --> 00:01:54.560
it as two numbers feeding in and
one number feeding out.

32
00:01:54.560 --> 00:01:57.440
In this way we can actually
also think about these

33
00:01:57.440 --> 00:02:00.050
kind of numbers when we want to use them.

34
00:02:00.050 --> 00:02:03.270
So this is how the same chip
will be described in HDL.

35
00:02:03.270 --> 00:02:06.500
I'm only giving the interface here,
the API, and

36
00:02:06.500 --> 00:02:10.840
omitting all the internal structure, which
is exactly what you'll learn next week.

37
00:02:10.840 --> 00:02:15.200
So we have simply eh, defined eh,
our inputs as a and b.

38
00:02:15.200 --> 00:02:18.240
And we have in square brackets
the number 16 which means that

39
00:02:18.240 --> 00:02:20.190
each one of these is 16 bits.

40
00:02:20.190 --> 00:02:24.370
Very much like the syntax for
arrays in programming languages.

41
00:02:24.370 --> 00:02:28.850
Now once we have this kind of notation,
we can think about these numbers and

42
00:02:28.850 --> 00:02:31.970
entities and
manipulate them in higher level chips.

43
00:02:31.970 --> 00:02:36.250
So suppose we need to ba,
to build chips that now add three numbers.

44
00:02:36.250 --> 00:02:38.510
Each one of them 16 bits.

45
00:02:38.510 --> 00:02:40.890
Logically, we of course
know how we can do that.

46
00:02:40.890 --> 00:02:43.970
We can just add two of them and
then add the third one to the sum.

47
00:02:45.110 --> 00:02:46.420
So how do we do that?

48
00:02:46.420 --> 00:02:50.360
So we get them into, we get in our
interface, three inputs, first, second,

49
00:02:50.360 --> 00:02:52.960
and third, each one of them 16 bits.

50
00:02:52.960 --> 00:02:53.720
And, we have it to, n,

51
00:02:53.720 --> 00:02:58.900
need to have an output which is fo,
just out of those 16 bits.

52
00:02:58.900 --> 00:03:02.270
And we want to manipulate it to
this level of av, of abstraction.

53
00:03:02.270 --> 00:03:04.900
Not looking at all
the separate bits themselves.

54
00:03:04.900 --> 00:03:07.000
This is how we do that in HDL.

55
00:03:07.000 --> 00:03:08.980
We have two inert internal chips.

56
00:03:08.980 --> 00:03:11.080
One of them adds two 16 bits.

57
00:03:11.080 --> 00:03:13.710
Juh, Add16 chips that we've just seen.

58
00:03:13.710 --> 00:03:16.860
And we add the first and
the second inputs and

59
00:03:16.860 --> 00:03:22.990
plugs the result into a temporary variable
called temp, which is also 16 bits.

60
00:03:22.990 --> 00:03:28.400
And then we take this temporary variable
and add it to the temporary wire if you

61
00:03:28.400 --> 00:03:35.170
wish, or temporary bus 16 wires and add it
to the third, getting our final output.

62
00:03:35.170 --> 00:03:41.300
And this is why how we can just manipulate
inside HDL eh, the busses as entities.

63
00:03:43.450 --> 00:03:47.600
Now of course we should also be
able to actually eh, manipulate and

64
00:03:47.600 --> 00:03:51.160
get access to separate bits in a bus
because at the end of the day a bus is

65
00:03:51.160 --> 00:03:53.240
just a bunch of bits together.

66
00:03:53.240 --> 00:03:58.150
So here's an example of suppose we want
to have a chip that gets us an input.

67
00:03:58.150 --> 00:04:00.920
A bus of 4 bits in this case.

68
00:04:00.920 --> 00:04:04.930
And outputs a single bit which is the AND
of all the bits in the bus.

69
00:04:04.930 --> 00:04:05.650
How do we do that?

70
00:04:05.650 --> 00:04:08.600
To do that we will need
to access bit after bit.

71
00:04:08.600 --> 00:04:11.420
And then simply add
them one after another.

72
00:04:11.420 --> 00:04:12.630
And this is how we do that.

73
00:04:12.630 --> 00:04:14.310
And notice the syntax.

74
00:04:14.310 --> 00:04:16.560
That's an important thing,
the syntax here.

75
00:04:16.560 --> 00:04:19.874
And when we put an index inside
the name of a pin of a bus,

76
00:04:19.874 --> 00:04:23.350
we just mean the specific bit
that we're talking about.

77
00:04:23.350 --> 00:04:27.256
We're using the convention in our HDL
that is common to most programming

78
00:04:27.256 --> 00:04:31.760
languages nowadays, that a 4-bit bus
has bits number 1, 0, 1, 2, and 3.

79
00:04:31.760 --> 00:04:38.070
So the indices go from 0
to the bus width minus 1.

80
00:04:38.070 --> 00:04:39.470
And this is how we do that.

81
00:04:39.470 --> 00:04:42.080
You're going to, in the next project,
in this project,

82
00:04:42.080 --> 00:04:46.080
you're going to have a bunch of chips
that actually, that's what they do.

83
00:04:46.080 --> 00:04:49.180
They take a bunch of bits in the bus and
just converge them and, and

84
00:04:49.180 --> 00:04:52.140
just mash them together
into a single value.

85
00:04:52.140 --> 00:04:54.540
And we call this multi-way chips.

86
00:04:54.540 --> 00:04:57.930
So this, we call this kind of chip here,
And4Way.

87
00:04:57.930 --> 00:05:00.360
Takes four bits and adds them together.

88
00:05:00.360 --> 00:05:04.410
Here's another example showing how
we can manipulate bits inside buses.

89
00:05:04.410 --> 00:05:07.640
And in the context of another
thing we'll do commonly in this,

90
00:05:07.640 --> 00:05:11.630
in this week's project,
basically taking a bunch of operations and

91
00:05:11.630 --> 00:05:15.880
doing them in parallel to each one of the,
the bits in a bunch of buses.

92
00:05:15.880 --> 00:05:19.020
So, in this example,
we have two input buses, and

93
00:05:19.020 --> 00:05:21.860
we simply want to do a bitwise AND
of them.

94
00:05:21.860 --> 00:05:25.060
Take the first bit of a and
b, AND it together, and

95
00:05:25.060 --> 00:05:27.470
that should produce the first bit of out.

96
00:05:27.470 --> 00:05:29.680
Similarly, doing the same for
the second bit, and so on.

97
00:05:31.200 --> 00:05:32.320
So here's how we do that.

98
00:05:32.320 --> 00:05:35.790
We simply have,
we need to have four AND gates.

99
00:05:35.790 --> 00:05:36.750
Each one of that AND

100
00:05:36.750 --> 00:05:40.639
gates performs operation on one of
the corresponding pairs of bits.

101
00:05:41.690 --> 00:05:45.750
And we access the bits one after another
simply listing the 0s bit, first bit,

102
00:05:45.750 --> 00:05:49.540
second bit, and putting the AND
gate on these inputs and

103
00:05:49.540 --> 00:05:51.250
producing the correct output.

104
00:05:51.250 --> 00:05:55.970
Immediately notice that the four bits of
the out that we just produced, go out as,

105
00:05:55.970 --> 00:05:58.960
as a single bus because that's
how it was defined in the API.

106
00:06:00.820 --> 00:06:05.220
So there are a bunch of technical
[COUGH] bunch of technical

107
00:06:05.220 --> 00:06:09.630
conveniences sometimes that you want
to use when dealing with buses.

108
00:06:09.630 --> 00:06:13.760
For example, you may sometimes want
to break a bus into sub-buses.

109
00:06:13.760 --> 00:06:16.170
So the first example here shows,

110
00:06:16.170 --> 00:06:20.010
what happens if we want to compose a bus,
a 16-bit bus.

111
00:06:20.010 --> 00:06:22.160
From two eight bit buses.

112
00:06:22.160 --> 00:06:27.480
So we, so this example shows that we have
in our input two 8-bi, bus, two 8-bit

113
00:06:27.480 --> 00:06:33.340
buses called lsb, least significant byte,
and msb, most significant byte.

114
00:06:33.340 --> 00:06:37.610
And if we want to plug them
together into an AND 16 gate,

115
00:06:37.610 --> 00:06:42.820
we can just take the first 8 bits of
the bus and plug the lsb into it.

116
00:06:42.820 --> 00:06:45.690
And the second 8-bit bits and
plug the msb into it.

117
00:06:45.690 --> 00:06:49.420
And notice the co, the,
notice the syntax for doing that.

118
00:06:49.420 --> 00:06:53.670
If we specify a sub-range intise,
inside the square brackets,

119
00:06:53.670 --> 00:06:58.840
in exactly this format, with the dot
dot notation, then we just get the bus

120
00:06:58.840 --> 00:07:03.350
being plugged into the correct
sub-bus that we want to do it.

121
00:07:03.350 --> 00:07:06.380
We can do that on the input and
we can do that on the output.

122
00:07:06.380 --> 00:07:08.020
And we can break them in different ways.

123
00:07:09.376 --> 00:07:14.290
Now different hardware description
languages deal with all these issues and

124
00:07:14.290 --> 00:07:16.280
have different syntactic conventions.

125
00:07:16.280 --> 00:07:19.349
And of course for our, our hardware
description language which you,

126
00:07:19.349 --> 00:07:21.790
which you will need to
work with in the project.

127
00:07:21.790 --> 00:07:24.800
You can find the exact
specification on the website.

128
00:07:24.800 --> 00:07:29.050
I would like to say just a one,
a few words about some

129
00:07:29.050 --> 00:07:34.360
peculiarities if you wish on our HDL
that you may find convenient to use.

130
00:07:34.360 --> 00:07:39.804
First of all, we do allow,
[COUGH] we do allow overlaps of sub buses,

131
00:07:39.804 --> 00:07:42.490
so you can take say bit 0 to 5.

132
00:07:42.490 --> 00:07:45.920
And out them,
output them as one bus of 6 bits.

133
00:07:45.920 --> 00:07:50.170
And then again take bits, let's say,
3 to 7 and output them with another bus.

134
00:07:50.170 --> 00:07:53.560
So simply outputting the same
bus in multiple ways

135
00:07:53.560 --> 00:07:55.700
that may be overlapping sub-buses.

136
00:07:55.700 --> 00:07:56.440
We allow that.

137
00:07:57.700 --> 00:08:00.840
Another convention that we
have is internal buses.

138
00:08:00.840 --> 00:08:05.400
Are just their widths is completely
deduced by what you plugged into them.

139
00:08:05.400 --> 00:08:09.310
So you don't need to specify the width
of an internal, bu, internal pin.

140
00:08:09.310 --> 00:08:11.140
It's just if it was connected to a bus,

141
00:08:11.140 --> 00:08:14.160
it just gets a correct width
that it was connected to.

142
00:08:14.160 --> 00:08:18.000
And the third syntactic convention that
I would like to mention is the fact

143
00:08:18.000 --> 00:08:22.910
that if you want to plug lots of zeroes or
lots of ones into a bus, you can do it and

144
00:08:22.910 --> 00:08:27.710
together in one command by using true or
false as constants, and

145
00:08:27.710 --> 00:08:31.290
in all or both of these cases,
you get, are multiplied.

146
00:08:31.290 --> 00:08:36.280
So if you plug true into some bus,
each one of the bits gets a value 1.

147
00:08:36.280 --> 00:08:39.330
And similarly for false,
where each one of the bits gets zero.

148
00:08:40.720 --> 00:08:43.504
So now we've finished this very simple,

149
00:08:43.504 --> 00:08:48.020
[COUGH] this very simple unit about
handling lots of bits together, and

150
00:08:48.020 --> 00:08:52.150
now we're ready to actually completely
specify the project of this week.