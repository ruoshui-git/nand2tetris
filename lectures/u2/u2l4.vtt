WEBVTT

1
00:00:04.465 --> 00:00:09.797
In this unit we're going to talk about
a very important component of every

2
00:00:09.797 --> 00:00:14.706
general purpose computer called ALU or
the Arithmetic Logic Unit.

3
00:00:14.706 --> 00:00:19.236
Back in 1945 the mathematician
John Von Neumann wrote

4
00:00:19.236 --> 00:00:22.933
a seminal paper in which
he included a diagram or

5
00:00:22.933 --> 00:00:28.610
a description of how general
purpose computers can be built.

6
00:00:28.610 --> 00:00:33.120
And this became to be known over the years
as the Von Neumann Architecture.

7
00:00:33.120 --> 00:00:37.060
Now, when you look at this diagram, you
see that one key player in the diagram is

8
00:00:37.060 --> 00:00:42.270
the central processing unit and
within this CPU, yet

9
00:00:42.270 --> 00:00:48.330
another important piece the ALU or
the Arithmetic Logic Unit.

10
00:00:48.330 --> 00:00:53.296
Now, if we obstruct the way all these
details and focus only on the ALU

11
00:00:53.296 --> 00:00:58.274
we can think of an abstraction
which receives to multi-bit inputs.

12
00:00:58.274 --> 00:01:01.208
We call them input one and input two, and

13
00:01:01.208 --> 00:01:05.280
the third input is the function
that has to be computed.

14
00:01:05.280 --> 00:01:11.070
So the ALU computes the function and
out comes the result of this computation.

15
00:01:11.070 --> 00:01:17.970
Now, the function f is one out of
a family of predetermined functions

16
00:01:17.970 --> 00:01:23.110
that taken together define what
this ALU is capable of doing.

17
00:01:23.110 --> 00:01:27.320
Some of these functions are arithmetic and
some of these functions are logical.

18
00:01:27.320 --> 00:01:31.950
So for example common computations
that ALU typically perform

19
00:01:31.950 --> 00:01:36.360
are integer addition,
integer multiplication, integer division.

20
00:01:37.570 --> 00:01:43.660
There may be some logical operations like
bit wise AND, bit wise OR and so on.

21
00:01:43.660 --> 00:01:47.990
So there's a really interesting question,
which is when you set out to build an ALU,

22
00:01:47.990 --> 00:01:53.040
how much functionality do you want
to build in this hardware device.

23
00:01:53.040 --> 00:01:58.200
Well this is a classical hardware software
trade off question, because if you choose

24
00:01:58.200 --> 00:02:04.340
not to implement something in hardware you
can always augment it later with software.

25
00:02:04.340 --> 00:02:09.570
So if for some reason you decide that
the ALU will not include multiplication or

26
00:02:09.570 --> 00:02:14.340
division, presumably at a later point
when you build your software layer

27
00:02:14.340 --> 00:02:18.250
you will deal, you will complete
this functionality with software.

28
00:02:19.500 --> 00:02:23.690
All right, now so
far everything that we said was true for

29
00:02:23.690 --> 00:02:26.560
every ALU out there on any computer.

30
00:02:26.560 --> 00:02:31.620
From now on we are going to focus on
one specific example of an ALU, we call

31
00:02:31.620 --> 00:02:39.370
it the Hack ALU because this is the ALU
that will hum inside our hack computer.

32
00:02:39.370 --> 00:02:42.450
This is the overall gate diagram, and

33
00:02:42.450 --> 00:02:48.650
as we see the ALU has two 16-bit
data inputs which we call x and y.

34
00:02:48.650 --> 00:02:54.710
It outputs a single 16-bit output which
we call out, which function to compute is

35
00:02:54.710 --> 00:03:01.400
determined by six control bits that have
strange names like zx and nx and so on.

36
00:03:01.400 --> 00:03:04.404
We will explain these names
in just a few minutes.

37
00:03:04.404 --> 00:03:07.196
Based on these six control bits,

38
00:03:07.196 --> 00:03:13.790
the ALU computes one out of
the following 18 functions of interest.

39
00:03:13.790 --> 00:03:18.420
And I call these functions functions
of interest because in principle

40
00:03:18.420 --> 00:03:21.560
the ALU can compute many more functions,
but

41
00:03:21.560 --> 00:03:26.410
we've decided to focus on
these 18 functions only.

42
00:03:26.410 --> 00:03:28.980
Now some of these
functions are very simple,

43
00:03:28.980 --> 00:03:34.410
like the constance of 01 minus 1,
xy and so on.

44
00:03:34.410 --> 00:03:36.630
And other functions are more involved and

45
00:03:36.630 --> 00:03:41.350
interesting like x plus y,
x and y, and so on.

46
00:03:41.350 --> 00:03:46.861
Now as we see from the diagram,
the ALU also computes

47
00:03:46.861 --> 00:03:52.756
two 1-bit control outputs
which are called zr and ng.

48
00:03:52.756 --> 00:03:56.411
The role of these two control bits and
the reason for

49
00:03:56.411 --> 00:03:59.982
these names would become
clear later in the unit.

50
00:03:59.982 --> 00:04:05.881
So let's move on and focus on
the output of the ALU from one side and

51
00:04:05.881 --> 00:04:11.566
the control bits that caused
the ALU to compute these outputs,

52
00:04:11.566 --> 00:04:15.790
and they cause it using this truth table.

53
00:04:15.790 --> 00:04:22.850
So this truth table gives you a complete
functional specification of this ALU.

54
00:04:22.850 --> 00:04:26.340
That is,
if you want to compute a certain function

55
00:04:26.340 --> 00:04:29.930
you can look it up on the right
hand side of the table.

56
00:04:29.930 --> 00:04:34.810
You can then read off the zeros and
ones that correspond to this function.

57
00:04:34.810 --> 00:04:38.830
You enter the zeros and
ones into the control bits and boom,

58
00:04:38.830 --> 00:04:43.490
using some sort of black magic,
the ALU will compute the desired function.

59
00:04:45.100 --> 00:04:50.080
So let me illustrate how
the ALU works in action and

60
00:04:50.080 --> 00:04:54.170
in order to do it,
I'm going to use our HDL simulator.

61
00:04:54.170 --> 00:04:56.890
So we can fire up the simulator,

62
00:04:56.890 --> 00:05:02.010
we can load the built-in ALU chip and
as a result,

63
00:05:02.010 --> 00:05:07.930
we'll get this chip
into the HDL window and

64
00:05:07.930 --> 00:05:13.990
once we do that,
notice that we also get some nice GUI.

65
00:05:13.990 --> 00:05:20.200
And indeed, some of the built-in chips
in our simulator have a GUI side effect

66
00:05:20.200 --> 00:05:26.650
that helps the user, you to understand
what goes on inside the respective chip.

67
00:05:26.650 --> 00:05:31.290
So this is a diagram that
we made up to help you

68
00:05:31.290 --> 00:05:34.080
keep track of what happens inside the ALU.

69
00:05:34.080 --> 00:05:36.700
So moving along, we begin testing.

70
00:05:36.700 --> 00:05:44.180
As you can notice we have set the ALU
inputs to two values, which are 30 and 20.

71
00:05:44.180 --> 00:05:46.910
And we also set the control
bits to 000111,

72
00:05:46.910 --> 00:05:52.700
which if you look at the table
that I showed you before,

73
00:05:52.700 --> 00:05:58.460
what they mean is it's a directive
that tells the ALU compute y-x.

74
00:05:58.460 --> 00:06:00.280
So the next thing that we do,

75
00:06:00.280 --> 00:06:04.000
is we have to tell the simulator
to actually do something.

76
00:06:04.000 --> 00:06:07.250
And we do it by clicking
this calculator icon, and

77
00:06:07.250 --> 00:06:13.080
this tells the LU to evaluate
the chip logic on the given inputs.

78
00:06:13.080 --> 00:06:17.570
So this is what happens next and
then we can inspect the outputs and

79
00:06:17.570 --> 00:06:23.690
if we do that indeed we see that the ALU
came out with what was advertised,

80
00:06:23.690 --> 00:06:27.300
which is minus 10, the result of y- x.

81
00:06:27.300 --> 00:06:31.040
So it looks like the ALU at least
in this example, works well.

82
00:06:33.730 --> 00:06:35.944
Let me give you a second example,

83
00:06:35.944 --> 00:06:40.623
which demonstrates the logical
computational abilities of the ALU.

84
00:06:40.623 --> 00:06:44.452
The first thing that I do is I
tell the simulator to revert to

85
00:06:44.452 --> 00:06:49.225
working with a Boolean formats rather
than decimal formats which make it

86
00:06:49.225 --> 00:06:51.648
much it much easier to enter zeros and

87
00:06:51.648 --> 00:06:56.560
ones into the various inputs of the ALU,
and that's what we do here.

88
00:06:56.560 --> 00:07:02.760
So I picked up two arbitrary
examples of 16-bit zeros and

89
00:07:02.760 --> 00:07:05.450
ones values, I entered them.

90
00:07:05.450 --> 00:07:12.770
And then I entered also
the control bit values

91
00:07:12.770 --> 00:07:20.020
000000 which happens to be
the directive to compute x and y.

92
00:07:20.020 --> 00:07:25.990
Once again, if you look at the truth
table, you will see this role listed out.

93
00:07:25.990 --> 00:07:30.070
And indeed after we click the calculator
icon, which I've skipped in this example,

94
00:07:30.070 --> 00:07:34.640
we see that the ALU actually
computed bit wise in the operation,

95
00:07:34.640 --> 00:07:39.900
and the result was the bit wise
end of the two given inputs.

96
00:07:39.900 --> 00:07:44.923
So so far, it seems like the ALU
is functioning quite well,

97
00:07:44.923 --> 00:07:47.642
at least in these two examples.

98
00:07:47.642 --> 00:07:52.340
Well, we didn't say anything
about how the ALU actually works.

99
00:07:52.340 --> 00:07:55.600
Everything so far was kind of magic.

100
00:07:55.600 --> 00:07:58.480
So now is the time to
open up the black box and

101
00:07:58.480 --> 00:08:01.390
understand how the ALU
actually performs this magic.

102
00:08:03.040 --> 00:08:09.520
So once again this is the gate diagram or
the interface diagram of the ALU, and

103
00:08:09.520 --> 00:08:14.380
I want to focus on the six control
bits and explain the names and

104
00:08:14.380 --> 00:08:20.460
operations of every one of these bits.

105
00:08:20.460 --> 00:08:26.090
So if zx=1, what we want to
do is set the x input to 0.

106
00:08:26.090 --> 00:08:33.090
So irrespective of what x is it can
be 17 or 19 or 5,003 or whatever.

107
00:08:33.090 --> 00:08:36.246
We set it to zero that's
what we do if the x is 1.

108
00:08:36.246 --> 00:08:44.830
If nx is 1, we set the x input to
not x this is Bitwise negation,

109
00:08:44.830 --> 00:08:48.070
and also notice that these two
things happen one after the other.

110
00:08:48.070 --> 00:08:52.700
So for example,
if zx equals 1 and nx equals 1,

111
00:08:52.700 --> 00:08:56.910
first of all, we 0 the x input and
then we negate it.

112
00:08:56.910 --> 00:08:59.188
So we'll get 1, 1, 1, 1, 1, 1,

113
00:08:59.188 --> 00:09:02.750
if this is indeed the values
of these two control bits.

114
00:09:02.750 --> 00:09:08.730
The same thing exactly happens
with a y input using the zy and

115
00:09:08.730 --> 00:09:14.190
ny directives if you will,
then we have an f bit.

116
00:09:14.190 --> 00:09:17.608
If f is 1, we compute x plus y.

117
00:09:17.608 --> 00:09:20.775
If f is 0, we compute x and y.

118
00:09:20.775 --> 00:09:24.840
Now, these are the processed x and y.

119
00:09:24.840 --> 00:09:27.890
So before we do these computations,
the x and

120
00:09:27.890 --> 00:09:32.870
ys have already undergone these
manipulations that we talked about before.

121
00:09:32.870 --> 00:09:37.300
They became either zero or negator or
nothing, maybe we didn't touch them, and

122
00:09:37.300 --> 00:09:43.080
then we compute either addition or
16-bit ending.

123
00:09:43.080 --> 00:09:45.920
Finally, we have the no bit.

124
00:09:45.920 --> 00:09:50.560
If the no bit is 1,
we negate the resulting output.

125
00:09:50.560 --> 00:09:55.260
The output that we just computed and
if no is 0, we leave it as is.

126
00:09:56.530 --> 00:10:01.347
If we do all of these operations
one after the other then

127
00:10:01.347 --> 00:10:04.921
what comes out is the desired function.

128
00:10:04.921 --> 00:10:08.160
And now that you understand
these semantics,

129
00:10:08.160 --> 00:10:12.652
you can actually look at the table and
try to convince yourself.

130
00:10:12.652 --> 00:10:17.824
You can actually prove that this
table delivers the required results,

131
00:10:17.824 --> 00:10:21.270
and I will demonstrate
to you how we can do it.

132
00:10:21.270 --> 00:10:26.910
So let's pick up one example,
let's see how value computes not x.

133
00:10:26.910 --> 00:10:29.770
So I look up not x in the right-hand side.

134
00:10:29.770 --> 00:10:34.862
I see it right there, and then I
look up the binary values of the six

135
00:10:34.862 --> 00:10:40.620
control bits and I start simulating
on paper what happens inside the ALU.

136
00:10:40.620 --> 00:10:45.660
So in order to do it I have to come up
with some arbitrary examples of x and y.

137
00:10:45.660 --> 00:10:50.696
So I make up two values and I use 4-bits
instead of 16 to make it less tedious.

138
00:10:50.696 --> 00:10:53.825
So I have these two examples x and
y arbitrarily chosen,

139
00:10:53.825 --> 00:10:56.298
and then I look at the control bits.

140
00:10:56.298 --> 00:11:00.270
Zx equals 0, and nx equals 0,

141
00:11:00.270 --> 00:11:04.700
which means that we don't touch
the x input, we leave it as is.

142
00:11:06.400 --> 00:11:11.661
And then we move onto the y input and
we see that zy equals 1,

143
00:11:11.661 --> 00:11:16.394
so we 0 the y input and
n y equals 1, so we negate it and

144
00:11:16.394 --> 00:11:20.760
what we get is the result 1, 1, 1, 1.

145
00:11:20.760 --> 00:11:27.420
Moving along f is 0 and if f is 0,
we want to compute x and y.

146
00:11:27.420 --> 00:11:32.538
So we compute x and
y and we get 1, 1, 0, 0.

147
00:11:32.538 --> 00:11:37.167
This is a bit wise end and
finally, no is 1.

148
00:11:37.167 --> 00:11:41.310
So we negate the result,
and we get 0, 0, 1, 1.

149
00:11:41.310 --> 00:11:45.920
Lo and behold, 0, 0, 1,
1 is exactly not of x.

150
00:11:45.920 --> 00:11:50.124
If you look at the original x,
which was 1, 1, 0, 0, we got not x.

151
00:11:50.124 --> 00:11:54.690
So we have proved that
this row in the truth

152
00:11:54.690 --> 00:11:59.656
table performs as advertised, so to speak.

153
00:11:59.656 --> 00:12:03.390
Moving along, we can take another example,
and this will be the final example.

154
00:12:04.650 --> 00:12:09.000
We look at y-x,
an arithmetic operation and

155
00:12:09.000 --> 00:12:15.050
once again we see the binary values,
and we begin simulating them.

156
00:12:15.050 --> 00:12:19.107
So once again, we start with two
arbitrary examples of x and y.

157
00:12:19.107 --> 00:12:21.530
I've chosen 2 and 7.

158
00:12:21.530 --> 00:12:23.130
This is arithmetic operations so

159
00:12:23.130 --> 00:12:27.340
it's easier to think about it then
both in decimal and in binary.

160
00:12:27.340 --> 00:12:28.578
So we have 2 and 7.

161
00:12:28.578 --> 00:12:33.318
And if everything works well,
we should get the result 5 because y- x,

162
00:12:33.318 --> 00:12:35.740
7- 2, should give us 5.

163
00:12:35.740 --> 00:12:42.540
So we see that zx is 0 and nx is 0, so we
don't touch the x input, it remains as is.

164
00:12:42.540 --> 00:12:47.870
And moving along, we see that zy is 0,
so we don't touch the y input.

165
00:12:47.870 --> 00:12:52.118
But ny is 1,
which means that we have to negate it.

166
00:12:52.118 --> 00:12:57.470
So 0, 1, 1, 1 became 1, 0, 0, 0.

167
00:12:57.470 --> 00:13:00.836
Moving along, we see that f equals 1.

168
00:13:00.836 --> 00:13:07.467
So we compute the addition, and
if we add up x and y, we get 1, 0, 1, 0.

169
00:13:07.467 --> 00:13:13.720
No also equals 1, so we negate
the result and we get 0, 1, 0, 1.

170
00:13:13.720 --> 00:13:18.540
And 1, 0, 1 represents 5,
which is exactly what we wanted.

171
00:13:18.540 --> 00:13:23.940
So once again you see that the ALU
performed as specified and

172
00:13:23.940 --> 00:13:29.556
many of you may still wonder how
this magic actually happens.

173
00:13:29.556 --> 00:13:33.092
We were told that we have
to do subtraction and

174
00:13:33.092 --> 00:13:38.780
actually we did addition, and
we got the result that we expected.

175
00:13:38.780 --> 00:13:44.160
Well we don't want to get too much into
it, but if you go back and read or look

176
00:13:44.160 --> 00:13:48.970
at the units where we discussed the two's
complement method, you will understand

177
00:13:48.970 --> 00:13:53.490
also the internal mechanics here, and
why everything comes out as expected.

178
00:13:54.620 --> 00:13:59.674
Now as we said earlier in the unit,
the ALU also

179
00:13:59.674 --> 00:14:05.516
computes an output to
a 1-bit output control bits.

180
00:14:05.516 --> 00:14:09.676
And these bits are called zr and ng, and

181
00:14:09.676 --> 00:14:14.594
the role of these bits is
to say something about

182
00:14:14.594 --> 00:14:19.600
the main output of the ALU denoted out.

183
00:14:19.600 --> 00:14:26.270
Specifically, if out equals 0,
the ALU sets zr to 1.

184
00:14:26.270 --> 00:14:30.580
Otherwise, the zr becomes 0, and

185
00:14:30.580 --> 00:14:35.630
if out is negative then ng equals 1.

186
00:14:35.630 --> 00:14:38.570
Otherwise, ng equals 0.

187
00:14:38.570 --> 00:14:42.120
Now, you may ask yourself why
do we need these two bits?

188
00:14:42.120 --> 00:14:47.352
Well, this will become clear when we
put together the overall computer

189
00:14:47.352 --> 00:14:51.899
architecture in which these two
bits play an important role.

190
00:14:51.899 --> 00:14:57.622
I'd like to make a few end
notes about the Hack ALU.

191
00:14:57.622 --> 00:15:03.659
I hope that we have convinced
you that it's a simple concept.

192
00:15:03.659 --> 00:15:09.040
It is very elegant, and
surprisingly it's also

193
00:15:09.040 --> 00:15:14.827
extremely easy to implement and
let me explain why.

194
00:15:14.827 --> 00:15:19.642
If you remember what we do with
ALU given all these control bits,

195
00:15:19.642 --> 00:15:24.120
in some cases we have to set
16-bit values to 0s, easy.

196
00:15:24.120 --> 00:15:28.661
In other case, we have to set it to 1,
also very easy.

197
00:15:28.661 --> 00:15:34.020
In some cases,
we have to negate an incoming value.

198
00:15:34.020 --> 00:15:36.700
We've done it before I
think in project one.

199
00:15:36.700 --> 00:15:40.820
We built a gate that does
exactly 16-bit negation.

200
00:15:40.820 --> 00:15:45.160
And in some other cases we have
to compute either plus or end and

201
00:15:45.160 --> 00:15:47.370
these two computations were already,

202
00:15:47.370 --> 00:15:53.080
are already taken care of using the chips
that you designed in previous projects.

203
00:15:53.080 --> 00:15:56.850
So all together,
there is very little to do.

204
00:15:56.850 --> 00:15:59.928
Everything was done in one way or

205
00:15:59.928 --> 00:16:05.748
another by existing chips that
you have already developed.

206
00:16:05.748 --> 00:16:09.321
So to sum up this is Leonardo da Vinci,

207
00:16:09.321 --> 00:16:13.678
one of the greatest
inventor's in history and

208
00:16:13.678 --> 00:16:20.400
Leonardo said that simplicity
is the ultimate sophistication.

209
00:16:20.400 --> 00:16:26.030
And I hope that I convince you that
the Hack ALU is both simple but

210
00:16:26.030 --> 00:16:26.840
quite sophisticated.

211
00:16:28.460 --> 00:16:33.360
So this has been the unit on the ALU, and

212
00:16:33.360 --> 00:16:39.660
this leads up to the next unit in
which we will get our hands dirty and

213
00:16:39.660 --> 00:16:43.990
build one such ALU,
along with some other chips.